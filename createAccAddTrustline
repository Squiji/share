	socket.on('createAccount_addTrustlineDEB', async (eventData) => { // Listen to a 'createAccount_addTrustlineDEB' event
			console.log('eventData contains ', eventData);
		//	server_StellarSdk

		// create a completely new and unique pair of keys
		// see more about KeyPair objects: https://stellar.github.io/js-stellar-sdk/Keypair.html
		const pair = StellarSdk.Keypair.random();

		const secret_key_new = pair.secret();
		// S-------------------------------------------------------
		const public_key_new = pair.publicKey();
		// G-------------------------------------------------------

		eventData = {
			privkey: secret_key_new,
			pubkey: public_key_new
		}
			console.log('eventData contains: ', eventData);

		
		const senderAccountPublicKey_AccountCreation = 'GDHTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
		const senderAccountPrivateKey_AccountCreation = 'SCDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';

		(async function buildAccountCreation_DEBPaymentTransaction() {
			// Transactions require a valid sequence number that is specific to this account.
			// We can fetch the current sequence number for the source account from Horizon.
			const account = await server_StellarSdk.loadAccount(senderAccountPublicKey_AccountCreation);

			// Right now, there's one function that fetches the base fee.
			// In the future, we'll have functions that are smarter about suggesting fees,
			// e.g.: `fetchCheapFee`, `fetchAverageFee`, `fetchPriorityFee`, etc.
			const fee = await server_StellarSdk.fetchBaseFee();

			// Get Asset Code by providing DEB asset issued by GB6G343Z2IHS3W2V6QGGEM622V5S4UUS7C2NEOZFPYG3DCEB256FAOZA
			const DEB = new StellarSdk.Asset('DEB', 'GB6G343Z2IHS3W2V6QGGEM622V5S4UUS7C2NEOZFPYG3DCEB256FAOZA');

                        // Derive Keypair object and public key (that starts with a G) from the secret
                        const sourceKeypair = StellarSdk.Keypair.fromSecret(senderAccountPrivateKey_AccountCreation);

			const destKeypair = StellarSdk.Keypair.fromSecret(secret_key_new);


		const transaction = new StellarSdk.TransactionBuilder(account, {
			fee,
			// Uncomment the following line to build transactions for the live network. Be
			// sure to also change the horizon hostname.
			// networkPassphrase: StellarSdk.Networks.PUBLIC,
			networkPassphrase: StellarSdk.Networks.PUBLIC
				})
			// Add a payment operation to the transaction
				//.addOperation(StellarSdk.Operation.payment({
				//	destination: receiverAccountPublicKey,
				// The term native asset refers to lumens
				//asset: DEB,
				// Specify 350.1234567 lumens. Lumens are divisible to seven digits past
				// the decimal. They are represented in JS Stellar SDK in string format
				// to avoid errors from the use of the JavaScript Number data structure.
				//amount: '0.0001',
			        .addOperation(StellarSdk.Operation.createAccount({
                        		destination: public_key_new,
                        		startingBalance: '2'
				}))
        
                		// Add CHANGE_TRUST operation to establish trustline
                		.addOperation(StellarSdk.Operation.changeTrust({ 
                        		asset: DEB,
                        		source: public_key_new
                		}))

                		
			// Make this transaction valid for the next 30 seconds only
			.setTimeout(30)
			// Uncomment to add a memo (https://www.stellar.org/developers/guides/concepts/transactions.html)
			//.addMemo(StellarSdk.Memo.text('Hello world!'))
			.build();

				// Sign this transaction with the secret key
				// NOTE: signing is transaction is network specific. Test network transactions
				// won't work in the public network. To switch networks, use the Network object
				// as explained above (look for StellarSdk.Network).
				// transaction.sign(sourceKeypair);

                		transaction.sign(sourceKeypair, destKeypair); //priv key to interstellar throwaway
                		//transaction.sign(secret_key_new);



			// Let's see the XDR (encoded in base64) of the transaction we just built
			console.log(transaction.toEnvelope().toXDR('base64'));

		// Submit the transaction to the Horizon server. The Horizon server will then
		// submit the transaction into the network for us.
		try {
		const transactionResult = await server_StellarSdk.submitTransaction(transaction);
			console.log(JSON.stringify(transactionResult, null, 2));
			console.log('\nSuccess! View the transaction at: ');
			console.log(transactionResult._links.transaction.href);
			console.log('eventData contains: ', eventData);
		} catch (e) {
			console.log('An error has occured:');
			console.log(e);
		}
		})();
